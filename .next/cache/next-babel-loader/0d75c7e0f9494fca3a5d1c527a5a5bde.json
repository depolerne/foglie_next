{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { request } from \"graphql-request\";\nimport capitalize from \"lodash/capitalize\";\nimport { imageFromJson, imageQueryFields } from \"../core/models\";\nimport { GRAPHQL_BASE_URL } from \"../graphql/apollo-client\";\n\nfunction memberFromJson(json, lang) {\n  var lng = capitalize(lang);\n  return {\n    id: json.id.toString(),\n    firstName: json[\"firstName\".concat(lng)],\n    lastName: json[\"lastName\".concat(lng)],\n    position: json[\"position\".concat(lng)],\n    image: imageFromJson(json.image)\n  };\n}\n\nexport var MemberService = {\n  getManyQuery: function getManyQuery(lang) {\n    var lng = capitalize(lang);\n    return \"\\n      {\\n        members {\\n          id\\n          firstName\".concat(lng, \"\\n          lastName\").concat(lng, \"\\n          position\").concat(lng, \"\\n          image {\\n            \").concat(imageQueryFields, \"\\n          }\\n        }\\n      }\\n    \");\n  },\n  getMany: function getMany(query, lang) {\n    var res;\n    return _regeneratorRuntime.async(function getMany$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(request(GRAPHQL_BASE_URL, query));\n\n          case 2:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.members.map(function (j) {\n              return memberFromJson(j, lang);\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}