{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { request } from \"graphql-request\";\nimport capitalize from \"lodash/capitalize\";\nimport { imageFromJson, imageQueryFields } from \"../core/models\";\nimport { GRAPHQL_BASE_URL } from \"../graphql/apollo-client\";\n\nfunction projectBaseFromJson(json, lang) {\n  var lng = capitalize(lang);\n  return {\n    id: json.id.toString(),\n    title: json[\"title\".concat(lng)],\n    image: imageFromJson(json.image),\n    category: {\n      name: json.category[\"name\".concat(lng)]\n    }\n  };\n}\n\nexport function projectPreviewFromJson(json, lang) {\n  return _objectSpread({}, projectBaseFromJson(json, lang), {\n    noContent: json.noContent\n  });\n}\n\nfunction projectDetailFromJson(json, lang) {\n  var lng = capitalize(lang);\n  return _objectSpread({}, projectBaseFromJson(json, lang), {\n    client: json[\"client\".concat(lng)],\n    location: json[\"location\".concat(lng)],\n    scale: json[\"scale\".concat(lng)],\n    content: json[\"content\".concat(lng)],\n    date: new Date(json.date).getFullYear().toString()\n  });\n}\n\nexport var ProjectService = {\n  getManyQuery: function getManyQuery(_ref) {\n    var lang = _ref.lang,\n        categoryId = _ref.categoryId,\n        skip = _ref.skip,\n        take = _ref.take,\n        isSubQuery = _ref.isSubQuery;\n    var lng = capitalize(lang);\n    var query = \"\\n      projects (skip: \".concat(skip, \", take: \").concat(take, \", categoryId: \\\"\").concat(categoryId !== null && categoryId !== void 0 ? categoryId : \"\", \"\\\") {\\n        data {\\n          id\\n          title\").concat(lng, \"\\n          image {\\n            \").concat(imageQueryFields, \"\\n          }\\n          category {\\n            name\").concat(lng, \"\\n          }\\n          noContent\\n        }\\n        count\\n        total\\n        page\\n        pageCount\\n      }\\n    \");\n    return isSubQuery ? query : \"{\".concat(query, \"}\");\n  },\n  getMany: function getMany(query, lang) {\n    var res;\n    return _regeneratorRuntime.async(function getMany$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(request(GRAPHQL_BASE_URL, query));\n\n          case 2:\n            res = _context.sent;\n            return _context.abrupt(\"return\", _objectSpread({}, res.projects, {\n              data: res.projects.data.map(function (j) {\n                return projectPreviewFromJson(j, lang);\n              })\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getOneQuery: function getOneQuery(id, lang) {\n    var lng = capitalize(lang);\n    return \"{\\n      project (id: \".concat(id, \") {\\n        id\\n        title\").concat(lng, \"\\n        image {\\n          \").concat(imageQueryFields, \"\\n        }\\n        category {\\n          name\").concat(lng, \"\\n        }\\n        content\").concat(lng, \"\\n        scale\").concat(lng, \"\\n        client\").concat(lng, \"\\n        location\").concat(lng, \"\\n        date\\n      }\\n    }\");\n  },\n  getOne: function getOne(query, lang) {\n    var res;\n    return _regeneratorRuntime.async(function getOne$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(request(GRAPHQL_BASE_URL, query));\n\n          case 2:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", projectDetailFromJson(res.project, lang));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}