{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { request } from \"graphql-request\";\nimport capitalize from \"lodash/capitalize\";\nimport { imageQueryFields } from \"../core/models\";\nimport { GRAPHQL_BASE_URL } from \"../graphql/apollo-client\";\nimport { blogItemFromJson } from \"./blog-service\";\n\nfunction postFromJson(json, lang) {\n  const lng = capitalize(lang);\n  return _objectSpread({}, blogItemFromJson(json, lang), {\n    content: json[`content${lng}`],\n    createdDate: parseInt(json.createdDate)\n  });\n}\n\nfunction relatedPostFromJson(json, lang) {\n  const lng = capitalize(lang);\n  return {\n    id: json.id.toString(),\n    title: json[`title${lng}`],\n    createdDate: parseInt(json.createdDate)\n  };\n}\n\nexport const PostService = {\n  getOneQuery: ({\n    lang,\n    id\n  }) => {\n    const lng = capitalize(lang);\n    return `{\n        post (id: ${id}) {\n            id\n            title${lng}\n            description${lng}\n            content${lng}\n            image {\n                ${imageQueryFields}\n            }\n            createdDate\n        }\n    }`;\n  },\n  getOne: async (query, lang) => {\n    const res = await request(GRAPHQL_BASE_URL, query);\n    return postFromJson(res.post, lang);\n  },\n  getRelatedPostsQuery: ({\n    lang,\n    id\n  }) => {\n    const lng = capitalize(lang);\n    return `{\n        relatedPosts (id: ${id}) {\n            id\n            title${lng}\n            createdDate\n        }\n    }`;\n  },\n  getRelatedPosts: async (query, lang) => {\n    const res = await request(GRAPHQL_BASE_URL, query);\n    return res.relatedPosts.map(json => relatedPostFromJson(json, lang));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}