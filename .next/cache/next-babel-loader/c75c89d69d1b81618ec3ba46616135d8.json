{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport Link from \"next-translate/Link\";\nimport useTranslation from \"next-translate/useTranslation\";\nimport { useRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport i18nConfig from \"../../i18n.json\";\nimport { theme } from \"../../theme/theme\";\nimport { NavDropdown } from \"./dropdown\";\nimport { NavLink } from \"./nav_link\";\nimport { SideMenu } from \"./sidemenu/side-menu\";\nimport { ToggleButton } from \"./ToggleButton\";\nconst {\n  allLanguages\n} = i18nConfig;\nconst Nav = styled.nav`\n  display: none;\n\n  @media (min-width: ${theme.breakpoints.md}) {\n    display: flex;\n  }\n`;\nconst StyledNavDropdown = styled(NavDropdown)`\n  & p {\n    color: ${props => props.isActive ? theme.colors.darkBlue.high : theme.colors.darkBlue.medium};\n  }\n`;\nconst NavItem = styled(NavLink)`\n  color: ${props => props.isActive ? theme.colors.darkBlue.high : theme.colors.darkBlue.medium};\n  display: flex;\n  align-items: center;\n  margin-left: 24px;\n`;\nconst DropdownItem = styled(NavLink)`\n  display: block;\n  padding: 16px 16px 0 16px;\n  white-space: nowrap;\n  color: ${theme.colors.white.high};\n`;\n\nconst Menu = () => {\n  const {\n    t,\n    lang\n  } = useTranslation();\n  const router = useRouter();\n  const {\n    0: isSideMenuOpen,\n    1: setIsSideMenuOpen\n  } = useState(false);\n\n  function openSideMenu() {\n    setIsSideMenuOpen(true);\n  }\n\n  function closeSideMenu() {\n    setIsSideMenuOpen(false);\n  }\n\n  const getCurrentUrlWithoutLang = () => {\n    const {\n      asPath\n    } = router;\n    const paths = asPath.split(\"/\");\n    const cl = paths[1];\n\n    if (allLanguages.includes(cl)) {\n      const url = paths.filter((_, i) => i !== 1).join(\"/\");\n      return url || \"/\";\n    }\n\n    return cl || \"/\";\n  };\n\n  const getActiveMenu = (_currentUrl, menuUrl) => {\n    const count = _currentUrl.split(\"/\").length - 1;\n    let currentUrl = _currentUrl;\n\n    if (count === 1) {\n      currentUrl = currentUrl.substring(1);\n    } else if (count === 2) {\n      currentUrl = currentUrl.substring(currentUrl.indexOf(\"/\") + 1);\n      currentUrl = currentUrl.substring(0, currentUrl.indexOf(\"/\"));\n    }\n\n    if (!Boolean(currentUrl)) {\n      return false;\n    }\n\n    return Array.isArray(menuUrl) ? menuUrl.some(menu => menu.includes(currentUrl)) : currentUrl.includes(menuUrl);\n  };\n\n  const currentUrl = getCurrentUrlWithoutLang();\n  return __jsx(React.Fragment, null, __jsx(Nav, null, __jsx(StyledNavDropdown, {\n    isActive: getActiveMenu(currentUrl, [\"about-company\", \"about-team\"]),\n    title: t(\"header:about\")\n  }, __jsx(Link, {\n    href: \"/about-company\",\n    passHref: true\n  }, __jsx(DropdownItem, null, t(\"header:about-company\"))), __jsx(Link, {\n    href: \"/about-team\",\n    passHref: true\n  }, __jsx(DropdownItem, null, t(\"header:about-team\")))), __jsx(Link, {\n    href: \"/portfolio\",\n    passHref: true\n  }, __jsx(NavItem, {\n    isActive: getActiveMenu(currentUrl, [\"portfolio\", \"project\"])\n  }, t(\"header:portfolio\"))), __jsx(Link, {\n    href: \"/blog\",\n    passHref: true\n  }, __jsx(NavItem, {\n    isActive: getActiveMenu(currentUrl, [\"blog\", \"post\"])\n  }, t(\"header:blog\"))), __jsx(Link, {\n    href: \"/pricing\",\n    passHref: true\n  }, __jsx(NavItem, {\n    isActive: getActiveMenu(currentUrl, \"pricing\")\n  }, t(\"header:pricing\"))), __jsx(Link, {\n    href: \"/contact\",\n    passHref: true\n  }, __jsx(NavItem, {\n    isActive: getActiveMenu(currentUrl, \"contact\")\n  }, t(\"header:contact\"))), __jsx(StyledNavDropdown, {\n    title: lang,\n    isActive: true,\n    css: css`\n            margin-left: 24px;\n          `\n  }, allLanguages.map(lng => {\n    if (lng === lang) return null;\n    return __jsx(Link, {\n      href: currentUrl,\n      lang: lng,\n      key: lng,\n      passHref: true\n    }, __jsx(DropdownItem, {\n      onClick: () => {\n        document.documentElement.lang = lng;\n      }\n    }, lng));\n  }))), __jsx(ToggleButton, {\n    \"aria-label\": \"Toggle side menu button\",\n    onClick: openSideMenu\n  }), __jsx(SideMenu, {\n    isOpen: isSideMenuOpen,\n    onClose: closeSideMenu\n  }));\n};\n\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}