{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  width: \", \";\\n  position: fixed;\\n  top: 0;\\n  bottom: 0;\\n  right: 0;\\n  z-index: 10;\\n  background-color: white;\\n  transform: translateX(\", \");\\n  transition: 0.3s transform ease;\\n  padding: 0 16px 32px 16px;\\n  overflow-y: auto;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-between;\\n\\n  @media (max-width: \", \") {\\n    left: \", \";\\n    transform: translateX(\", \");\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  right: 0;\\n  z-index: 9;\\n  background-color: \", \";\\n  pointer-events: \", \";\\n  opacity: \", \";\\n  transition: 0.3s opacity ease;\\n\\n  @media (max-width: \", \") {\\n    display: none;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// import { css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport { theme } from \"../../../theme/theme\";\nvar WIDTH = 225;\nvar Backdrop = styled.div(_templateObject(), theme.colors.darkBlue.disabled, function (props) {\n  return props.isOpen ? \"auto\" : \"none\";\n}, function (props) {\n  return props.isOpen ? 1 : 0;\n}, theme.breakpoints.xs);\nvar Menu = styled.aside(_templateObject2(), function (props) {\n  return props.isOpen ? \"auto\" : 0;\n}, function (props) {\n  return props.isOpen ? 0 : \"\".concat(WIDTH, \"px\");\n}, theme.breakpoints.xs, function (props) {\n  return props.isOpen ? 0 : \"auto\";\n}, function (props) {\n  return props.isOpen ? 0 : \"100%\";\n});\nexport var SideMenuContainer = function SideMenuContainer(_ref) {\n  var onClose = _ref.onClose,\n      isOpen = _ref.isOpen,\n      children = _ref.children;\n  return __jsx(React.Fragment, null, __jsx(Backdrop, {\n    onClick: onClose,\n    isOpen: isOpen\n  }), __jsx(Menu, {\n    isOpen: isOpen\n  }, children));\n};","map":null,"metadata":{},"sourceType":"module"}