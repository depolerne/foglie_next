{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { request } from \"graphql-request\";\nimport capitalize from \"lodash/capitalize\";\nimport { imageFromJson, imageQueryFields } from \"../core/models\";\nimport { GRAPHQL_BASE_URL } from \"../graphql/apollo-client\";\nexport const blogItemFromJson = (json, lang) => {\n  const lng = capitalize(lang);\n  return {\n    id: json.id.toString(),\n    title: json[`title${lng}`],\n    description: json[`description${lng}`],\n    image: imageFromJson(json.image)\n  };\n};\nexport const BlogService = {\n  getManyQuery: ({\n    lang,\n    skip,\n    take\n  }) => {\n    const lng = capitalize(lang);\n    return `\n        {\n            posts (skip: ${skip}, take: ${take}) {\n                data {\n                    id\n                    title${lng}\n                    description${lng}\n                    image {\n                        ${imageQueryFields}\n                    }\n                }\n                count\n                total\n                page\n                pageCount\n            }\n        }\n    `;\n  },\n  getMany: async (query, lang) => {\n    const res = await request(GRAPHQL_BASE_URL, query);\n    return _objectSpread({}, res.posts, {\n      data: res.posts.data.map(json => blogItemFromJson(json, lang))\n    });\n  },\n  getInstagramImagesQuery: () => {\n    return `\n        {\n            instagramImages {\n                id\n                media_type\n                media_url\n            }\n        }\n    `;\n  },\n  getInstagramImages: async query => {\n    return await request(GRAPHQL_BASE_URL, query);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}