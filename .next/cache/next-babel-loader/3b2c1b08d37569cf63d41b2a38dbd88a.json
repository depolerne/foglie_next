{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport useTranslation from \"next-translate/useTranslation\";\nimport { useRouter } from \"next/dist/client/router\";\nimport useSWR, { useSWRPages } from \"swr\";\nimport { ProjectService } from \"../../services/projectService\";\nimport { theme } from \"../../theme/theme\";\nimport { Async } from \"../Async\";\nimport { LoadMore } from \"../LoadMore\";\nimport { ProjectsListItem } from \"./projects-list-item\";\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: auto;\n  grid-gap: 24px;\n  margin-bottom: 24px;\n  grid-template-areas:\n    \"area-1 area-1 area-1 area-1 area-1 area-1 area-1 area-1 area-1 area-1\"\n    \"area-2 area-2 area-2 area-2 area-2 area-2 area-2 area-2 area-2 area-2\"\n    \"area-3 area-3 area-3 area-3 area-3 area-3 area-3 area-3 area-3 area-3\"\n    \"area-4 area-4 area-4 area-4 area-4 area-4 area-4 area-4 area-4 area-4\"\n    \"area-5 area-5 area-5 area-5 area-5 area-5 area-5 area-5 area-5 area-5\"\n    \"area-6 area-6 area-6 area-6 area-6 area-6 area-6 area-6 area-6 area-6\";\n\n  @media (min-width: ${theme.breakpoints.lg}) {\n    grid-template-areas:\n      \"area-1 area-1 area-1 area-1 area-2 area-2 area-2 area-2 area-2 area-2\"\n      \"area-3 area-3 area-3 area-3 area-3 area-3 area-4 area-4 area-4 area-4\"\n      \"area-5 area-5 area-5 area-5 area-5 area-6 area-6 area-6 area-6 area-6\";\n  }\n`;\nconst Page = styled.div`\n  padding-bottom: 104px;\n`;\nconst ListWrapper = styled.div`\n  min-height: 440px;\n`;\nconst LoadMoreWrapper = styled.div`\n  margin-top: 40px;\n`;\nconst DEFAULT_LIMIT = 6;\nexport const ProjectsList = () => {\n  var _router$query, _router$query$categor;\n\n  const {\n    t,\n    lang\n  } = useTranslation();\n  const router = useRouter();\n  const selectedCategoryId = router === null || router === void 0 ? void 0 : (_router$query = router.query) === null || _router$query === void 0 ? void 0 : (_router$query$categor = _router$query.category) === null || _router$query$categor === void 0 ? void 0 : _router$query$categor.toString();\n  const {\n    pages,\n    isLoadingMore,\n    isReachingEnd,\n    loadMore\n  } = useSWRPages(\"projects\", ({\n    offset,\n    withSWR\n  }) => {\n    const branch = withSWR(useSWR(ProjectService.getManyQuery({\n      lang,\n      categoryId: selectedCategoryId,\n      skip: offset !== null && offset !== void 0 ? offset : 0,\n      take: DEFAULT_LIMIT\n    }), q => ProjectService.getMany(q, lang)));\n    return __jsx(Async, {\n      branch: branch,\n      minHeight: \"1000px\",\n      renderData: projects => {\n        return __jsx(Grid, null, projects.data.map((project, i) => __jsx(ProjectsListItem, {\n          key: project.id,\n          project: project,\n          css: css`\n                      grid-area: ${`area-${i + 1}`};\n                    `\n        })));\n      }\n    });\n  }, (SWR, index) => {\n    if (SWR.data) {\n      if (SWR.data.total - DEFAULT_LIMIT * SWR.data.page <= 0) return null;\n    }\n\n    return (index + 1) * DEFAULT_LIMIT;\n  }, [selectedCategoryId]);\n  return __jsx(Page, null, __jsx(ListWrapper, null, pages), !isReachingEnd && __jsx(LoadMoreWrapper, null, __jsx(LoadMore, {\n    onClick: loadMore,\n    disabled: isLoadingMore,\n    title: t(\"portfolio:more\")\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}