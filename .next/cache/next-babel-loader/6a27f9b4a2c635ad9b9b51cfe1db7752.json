{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport useTranslation from \"next-translate/useTranslation\";\nimport dynamic from \"next/dynamic\";\nimport { useState } from \"react\";\nimport { ContactService } from \"../../services/contact-service\";\nimport { theme } from \"../../theme/theme\";\nimport { PageTitle } from \"../PageTitle\";\nimport { contactBreakPoints } from \"./breakpoints\";\nimport ContactForm from \"./contact-form\";\nimport ContactInfoItem from \"./contact-info-item\";\nimport ContactSubmit from \"./contact-submit\";\nconst ContactMap = dynamic(() => import(\"./contact-map\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./contact-map\")],\n    modules: [\"./contact-map\"]\n  }\n});\nconst map = css`\n  margin-top: 64px;\n  min-height: 400px;\n  display: flex;\n  flex-direction: column;\n\n  @media (max-width: 900px) {\n    min-height: 300px;\n  }\n  @media (max-width: 600px) {\n    min-height: 200px;\n  }\n\n  > div {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    width: 100% !important;\n\n    > div {\n      flex: 1;\n    }\n  }\n`;\nconst container = css`\n  display: flex;\n  flex-direction: column;\n  width: 70%;\n  margin-left: auto;\n  margin-bottom: 104px;\n\n  @media (max-width: ${contactBreakPoints[0]}) {\n    width: auto;\n  }\n`;\nconst info = css`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin-bottom: 64px;\n`;\nconst StyledTitle = styled(PageTitle)`\n  margin-top: 32px;\n  @media (max-width: ${theme.breakpoints.lg}) {\n    margin-top: 64px;\n  }\n\n  & h3 {\n    @media (max-width: ${theme.breakpoints.xs}) {\n      font-size: 46px;\n    }\n  }\n`;\n\nconst ContactInfo = () => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: form,\n    1: setState\n  } = useState({\n    name: \"\",\n    email: \"\",\n    message: \"\"\n  });\n  const {\n    0: errors,\n    1: setErrors\n  } = useState([]);\n  const {\n    0: status,\n    1: setStatus\n  } = useState(\"init\");\n\n  const validateEmail = email => {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  };\n\n  const updateField = e => {\n    setState(_objectSpread({}, form, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const validateFields = form => {\n    const {\n      name,\n      email,\n      message\n    } = form;\n    const errors = [];\n\n    if (name === \"\") {\n      errors.push(\"name\");\n    }\n\n    if (email === \"\" || !validateEmail(email)) {\n      errors.push(\"email\");\n    }\n\n    if (message === \"\") {\n      errors.push(\"message\");\n    }\n\n    setErrors(errors);\n    return errors.length === 0;\n  };\n\n  const onSubmit = () => {\n    if (validateFields(form)) {\n      setStatus(\"loading\");\n      ContactService.sendMessage(ContactService.sendMessageQuery(form.name, form.email, form.message), form.name, form.email, form.message).finally(() => {\n        setStatus(\"init\");\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    css: container\n  }, __jsx(\"div\", {\n    css: map\n  }, __jsx(ContactMap, null)), __jsx(StyledTitle, {\n    subtitle: t(\"contact:subtitle\"),\n    title: t(\"contact:contactInformation\")\n  }), __jsx(\"div\", {\n    css: info\n  }, __jsx(ContactInfoItem, {\n    img: \"/static/address.svg\",\n    text: t(\"common:address\"),\n    alt: \"Address icon\"\n  }), __jsx(ContactInfoItem, {\n    img: \"/static/phone.svg\",\n    text: t(\"common:phone\"),\n    alt: \"Phone icon\"\n  }), __jsx(ContactInfoItem, {\n    img: \"/static/email.svg\",\n    text: t(\"common:email\"),\n    alt: \"Email icon\"\n  })), __jsx(ContactForm, {\n    form: form,\n    errors: errors,\n    onChange: updateField\n  }), __jsx(ContactSubmit, {\n    status: status,\n    onSubmit: onSubmit\n  }));\n};\n\nexport default ContactInfo;","map":null,"metadata":{},"sourceType":"module"}