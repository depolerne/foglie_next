{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { request } from \"graphql-request\";\nimport capitalize from \"lodash/capitalize\";\nimport { imageQueryFields } from \"../core/models\";\nimport { GRAPHQL_BASE_URL } from \"../graphql/apollo-client\";\nimport { blogItemFromJson } from \"./blog-service\";\n\nfunction postFromJson(json, lang) {\n  var lng = capitalize(lang);\n  return _objectSpread({}, blogItemFromJson(json, lang), {\n    content: json[\"content\".concat(lng)],\n    createdDate: parseInt(json.createdDate)\n  });\n}\n\nfunction relatedPostFromJson(json, lang) {\n  var lng = capitalize(lang);\n  return {\n    id: json.id.toString(),\n    title: json[\"title\".concat(lng)],\n    createdDate: parseInt(json.createdDate)\n  };\n}\n\nexport var PostService = {\n  getOneQuery: function getOneQuery(_ref) {\n    var lang = _ref.lang,\n        id = _ref.id;\n    var lng = capitalize(lang);\n    return \"{\\n        post (id: \".concat(id, \") {\\n            id\\n            title\").concat(lng, \"\\n            description\").concat(lng, \"\\n            content\").concat(lng, \"\\n            image {\\n                \").concat(imageQueryFields, \"\\n            }\\n            createdDate\\n        }\\n    }\");\n  },\n  getOne: function getOne(query, lang) {\n    var res;\n    return _regeneratorRuntime.async(function getOne$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(request(GRAPHQL_BASE_URL, query));\n\n          case 2:\n            res = _context.sent;\n            return _context.abrupt(\"return\", postFromJson(res.post, lang));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getRelatedPostsQuery: function getRelatedPostsQuery(_ref2) {\n    var lang = _ref2.lang,\n        id = _ref2.id;\n    var lng = capitalize(lang);\n    return \"{\\n        relatedPosts (id: \".concat(id, \") {\\n            id\\n            title\").concat(lng, \"\\n            createdDate\\n        }\\n    }\");\n  },\n  getRelatedPosts: function getRelatedPosts(query, lang) {\n    var res;\n    return _regeneratorRuntime.async(function getRelatedPosts$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(request(GRAPHQL_BASE_URL, query));\n\n          case 2:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res.relatedPosts.map(function (json) {\n              return relatedPostFromJson(json, lang);\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}