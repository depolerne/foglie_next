{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { request } from \"graphql-request\";\nimport capitalize from \"lodash/capitalize\";\nimport { imageFromJson, imageQueryFields } from \"../core/models\";\nimport { GRAPHQL_BASE_URL } from \"../graphql/apollo-client\";\n\nfunction projectBaseFromJson(json, lang) {\n  const lng = capitalize(lang);\n  return {\n    id: json.id.toString(),\n    title: json[`title${lng}`],\n    image: imageFromJson(json.image),\n    category: {\n      name: json.category[`name${lng}`]\n    }\n  };\n}\n\nexport function projectPreviewFromJson(json, lang) {\n  return _objectSpread({}, projectBaseFromJson(json, lang), {\n    noContent: json.noContent\n  });\n}\n\nfunction projectDetailFromJson(json, lang) {\n  const lng = capitalize(lang);\n  return _objectSpread({}, projectBaseFromJson(json, lang), {\n    client: json[`client${lng}`],\n    location: json[`location${lng}`],\n    scale: json[`scale${lng}`],\n    content: json[`content${lng}`],\n    date: new Date(json.date).getFullYear().toString()\n  });\n}\n\nexport const ProjectService = {\n  getManyQuery: ({\n    lang,\n    categoryId,\n    skip,\n    take,\n    isSubQuery\n  }) => {\n    const lng = capitalize(lang);\n    const query = `\n      projects (skip: ${skip}, take: ${take}, categoryId: \"${categoryId !== null && categoryId !== void 0 ? categoryId : \"\"}\") {\n        data {\n          id\n          title${lng}\n          image {\n            ${imageQueryFields}\n          }\n          category {\n            name${lng}\n          }\n          noContent\n        }\n        count\n        total\n        page\n        pageCount\n      }\n    `;\n    return isSubQuery ? query : `{${query}}`;\n  },\n  getMany: async (query, lang) => {\n    const res = await request(GRAPHQL_BASE_URL, query);\n    return _objectSpread({}, res.projects, {\n      data: res.projects.data.map(j => projectPreviewFromJson(j, lang))\n    });\n  },\n  getOneQuery: (id, lang) => {\n    const lng = capitalize(lang);\n    return `{\n      project (id: ${id}) {\n        id\n        title${lng}\n        image {\n          ${imageQueryFields}\n        }\n        category {\n          name${lng}\n        }\n        content${lng}\n        scale${lng}\n        client${lng}\n        location${lng}\n        date\n      }\n    }`;\n  },\n  getOne: async (query, lang) => {\n    const res = await request(GRAPHQL_BASE_URL, query);\n    return projectDetailFromJson(res.project, lang);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}