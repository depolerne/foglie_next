{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { request } from \"graphql-request\";\nimport capitalize from \"lodash/capitalize\";\nimport { imageFromJson, imageQueryFields } from \"../core/models\";\nimport { GRAPHQL_BASE_URL } from \"../graphql/apollo-client\";\nexport var blogItemFromJson = function blogItemFromJson(json, lang) {\n  var lng = capitalize(lang);\n  return {\n    id: json.id.toString(),\n    title: json[\"title\".concat(lng)],\n    description: json[\"description\".concat(lng)],\n    image: imageFromJson(json.image)\n  };\n};\nexport var BlogService = {\n  getManyQuery: function getManyQuery(_ref) {\n    var lang = _ref.lang,\n        skip = _ref.skip,\n        take = _ref.take;\n    var lng = capitalize(lang);\n    return \"\\n        {\\n            posts (skip: \".concat(skip, \", take: \").concat(take, \") {\\n                data {\\n                    id\\n                    title\").concat(lng, \"\\n                    description\").concat(lng, \"\\n                    image {\\n                        \").concat(imageQueryFields, \"\\n                    }\\n                }\\n                count\\n                total\\n                page\\n                pageCount\\n            }\\n        }\\n    \");\n  },\n  getMany: function getMany(query, lang) {\n    var res;\n    return _regeneratorRuntime.async(function getMany$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(request(GRAPHQL_BASE_URL, query));\n\n          case 2:\n            res = _context.sent;\n            return _context.abrupt(\"return\", _objectSpread({}, res.posts, {\n              data: res.posts.data.map(function (json) {\n                return blogItemFromJson(json, lang);\n              })\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getInstagramImagesQuery: function getInstagramImagesQuery() {\n    return \"\\n        {\\n            instagramImages {\\n                id\\n                media_type\\n                media_url\\n            }\\n        }\\n    \";\n  },\n  getInstagramImages: function getInstagramImages(query) {\n    return _regeneratorRuntime.async(function getInstagramImages$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(request(GRAPHQL_BASE_URL, query));\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}